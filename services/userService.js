require("dotenv").config();
const User = require("../models/userModel");
const Post = require('../models/postModel');
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const crypto = require("crypto");
const { sendMail } = require("../utils/mail");
// üìå X·ª≠ l√Ω logic ƒëƒÉng k√Ω
const registerUser = async (body) => {
    const {
        username ,
        firstName ,
        lastName ,
        birthDate,
        gender ,
        email ,
        password
    } = body;

    console.log("Body: ", body);

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!username || !email || !password) {
        return {
            status: 400,
            data: { message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin" }
        };
    }

    // Ki·ªÉm tra username ho·∫∑c email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser) {
        return {
            status: 400,
            data: { message: "Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i" }
        };
    }

    // T·∫°o OTP v√† m√£ h√≥a m·∫≠t kh·∫©u
    const otp = crypto.randomInt(100000, 999999).toString();
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    const newUser = new User({
        username,
        email,
        password: hashedPassword,
        otp,
        otpExpiresAt: new Date(Date.now() + 10 * 60 * 1000),
        profile: {
            firstname: firstName,
            lastname: lastName,
            gender: gender || "",
            birthday: birthDate ? new Date(birthDate) : null,
            bio: "",
            avatar: ""
        },
        friends: {
            pending: [],
            accepted: [],
            blocked: []
        }
    });

    await newUser.save();
    await sendMail(email, "X√°c minh t√†i kho·∫£n", `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`);

    return {
        status: 200,
        data: {
            message: "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n.",
        }
    };
};

//üìå H√†m t·∫°o JWT
const generateToken = (userId) => {
    return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRES_IN || "7d",
    });
};

// üìå X·ª≠ l√Ω logic ƒëƒÉng nh·∫≠p
const loginUser = async (email, password) => {
    const user = await User.findOne({ email });

    if (!user || !(await bcrypt.compare(password, user.password))) {
        return {
            status: 401,
            data: { message: "Sai username ho·∫∑c password" }
        };
    }

    const token = generateToken(user._id);

    return {
        status: 200,
        data: {
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            token,
            user: {
                _id: user._id,
                username: user.username,
                email: user.email,
                name: user.profile.name,
                avatar: user.profile.avatar,
            }
        }
    };
};

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
const getUserProfile = async (userId) => {
  const userDoc = await User.findById(userId).select("-password");
  if (!userDoc) {
    return {
      status: 404,
      data: { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" }
    };
  }

  const user = userDoc.toObject();

  // L·∫•y s·ªë l∆∞·ª£ng b√†i vi·∫øt, follower, following

  const postCount = await Post.countDocuments({ author: user._id });
  // followerCount: s·ªë ng∆∞·ªùi theo d√µi user n√†y
  const followerCount = Array.isArray(user.friends.follower) ? user.friends.follower.length : (user.friends.follower ? user.friends.follower : 0);
  // followingCount: s·ªë ng∆∞·ªùi user n√†y ƒëang theo d√µi
  const followingCount = Array.isArray(user.friends.following) ? user.friends.following.length : (user.friends.following ? user.friends.following : 0);

  // G·∫Øn tr·ª±c ti·∫øp v√†o user
  user.postCount = postCount;
  user.followerCount = followerCount;
  user.followingCount = followingCount;

  return {
    status: 200,
    data: {
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      user
    }
  };
};

// üìå X√°c th·ª±c OTP
const verifyOTP = async (email, otp) => {
    if (!email || !otp) {
        return {
            status: 400,
            data: { message: "Vui l√≤ng cung c·∫•p email v√† m√£ OTP" }
        };
    }
    const user = await User.findOne({ email });
    if (!user) {
        return {
            status: 404,
            data: { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" }
        };
    }
    if (user.isVerified) {
        return {
            status: 400,
            data: { message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c" }
        };
    }
    if (user.otp !== otp) {
        return {
            status: 400,
            data: { message: "M√£ OTP kh√¥ng ƒë√∫ng" }
        };
    }
    if (!user.otpExpiresAt || user.otpExpiresAt < new Date()) {
        return {
            status: 400,
            data: { message: "M√£ OTP ƒë√£ h·∫øt h·∫°n" }
        };
    }
    user.isVerified = true;
    user.otp = null;
    user.otpExpiresAt = null;
    await user.save();
    return {
        status: 200,
        data: { message: "X√°c th·ª±c OTP th√†nh c√¥ng" }
    };
};

// üìå Qu√™n m·∫≠t kh·∫©u
const forgotPassword = async (email) => {
    if (!email) {
        return {
            status: 400,
            data: { message: "Vui l√≤ng nh·∫≠p email" }
        };
    }
    const user = await User.findOne({ email });
    if (!user) {
        return {
            status: 404,
            data: { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" }
        };
    }
    // T·∫°o OTP m·ªõi cho qu√™n m·∫≠t kh·∫©u
    const otp = crypto.randomInt(100000, 999999).toString();
    user.otp = otp;
    user.otpExpiresAt = new Date(Date.now() + 10 * 60 * 1000);
    await user.save();
    await sendMail(email, "Qu√™n m·∫≠t kh·∫©u", `M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp}`);
    return {
        status: 200,
        data: { message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n." }
    };
};

// üìå X√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u
const forgotPasswordOTP = async (email, otp) => {
    if (!email || !otp) {
        return {
            status: 400,
            data: { message: "Vui l√≤ng cung c·∫•p email v√† m√£ OTP" }
        };
    }
    const user = await User.findOne({ email });
    if (!user) {
        return {
            status: 404,
            data: { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" }
        };
    }
    if (user.otp !== otp) {
        return {
            status: 400,
            data: { message: "M√£ OTP kh√¥ng ƒë√∫ng" }
        };
    }
    if (!user.otpExpiresAt || user.otpExpiresAt < new Date()) {
        return {
            status: 400,
            data: { message: "M√£ OTP ƒë√£ h·∫øt h·∫°n" }
        };
    }
    // ƒê√°nh d·∫•u ƒë√£ x√°c th·ª±c OTP cho qu√™n m·∫≠t kh·∫©u
    user.isVerifiedForgot = true;
    await user.save();
    return {
        status: 200,
        data: { message: "X√°c th·ª±c OTP th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi." }
    };
};

// üìå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
const resetPassword = async (email, newPassword) => {
    if (!email || !newPassword) {
        return {
            status: 400,
            data: { message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u m·ªõi" }
        };
    }
    const user = await User.findOne({ email });
    if (!user) {
        return {
            status: 404,
            data: { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" }
        };
    }
    // Ki·ªÉm tra ƒë√£ x√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u ch∆∞a
    if (!user.isVerifiedForgot) {
        return {
            status: 400,
            data: { message: "B·∫°n ch∆∞a x√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u" }
        };
    }
    user.password = await bcrypt.hash(newPassword, 10);
    user.isVerifiedForgot = false;
    user.otp = null;
    user.otpExpiresAt = null;
    await user.save();
    return {
        status: 200,
        data: { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." }
    };
};


// üìå C·∫≠p nh·∫≠t th√¥ng tin profile ng∆∞·ªùi d√πng
const updateUserProfile = async (user, body, file) => {
    try {
        const { username, lastname, firstname, birthday, bio } = body;
        // ƒê·∫£m b·∫£o user.profile t·ªìn t·∫°i

        // Ch·ªâ c·∫≠p nh·∫≠t avatar n·∫øu c√≥ file m·ªõi, n·∫øu kh√¥ng th√¨ kh√¥ng g·ª≠i tr∆∞·ªùng avatar v√†o update
        const updateFields = {
            username,
            'profile.lastname': lastname,
            'profile.firstname': firstname,
            'profile.birthday': birthday,
            'profile.bio': bio,
        };
        if (file && file.path) {
            updateFields['profile.avatar'] = file.path;
        }

        await User.findByIdAndUpdate(
            user.id,
            updateFields,
            { new: true }
        );

        // L·∫•y l·∫°i user m·ªõi nh·∫•t sau khi c·∫≠p nh·∫≠t
        const updatedUser = await User.findById(user._id).select('-password');

        return {
            status: 200,
            data: {
                success: true,
                message: 'C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n th√†nh c√¥ng!',
                user: updatedUser
            }
        };
    } catch (err) {
        return {
            status: 500,
            data: { success: false, message: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i', error: err.message }
        };
    }
};

module.exports = {
    loginUser,
    getUserProfile,
    registerUser,
    verifyOTP,
    forgotPassword,
    forgotPasswordOTP,
    resetPassword,
    updateUserProfile
};
