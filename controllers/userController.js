const userService = require("../services/userService");
const User = require("../models/userModel");
const { tokenize } = require("../utils/searchHelper");

const login = async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res
      .status(400)
      .json({ message: "Vui l√≤ng cung c·∫•p email v√† password" });
  }

  try {
    const result = await userService.loginUser(email, password);
    if (result.status === 200) {
      res.cookie("refreshToken", result.refreshToken, {
        httpOnly: true,
        secure: false,
        sameSite: "Strict",
        maxAge: 30 * 24 * 60 * 60 * 1000,
      });
      return res.status(result.status).json(result.data);
    }
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau" });
  }
};

// L·∫•y profile user theo username
const getUserProfileByUsername = async (req, res) => {
  try {
    const username = req.params.username;
    const currentUser = req.user.id;
    const result = await userService.getUserProfileByUsername(
      username,
      currentUser
    );
    return res.status(result.status).json(result.data);
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server" });
  }
};

const getProfile = async (req, res) => {
  try {
    const result = await userService.getUserProfile(req.user.id);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói khi l·∫•y profile:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

// üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
const register = async (req, res) => {
  try {
    const result = await userService.registerUser(req.body);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

// üìå X√°c th·ª±c OTP
const verifyOTP = async (req, res) => {
  const { email, otp } = req.body;
  if (!email || !otp) {
    return res
      .status(400)
      .json({ message: "Vui l√≤ng cung c·∫•p email v√† m√£ OTP" });
  }
  try {
    const result = await userService.verifyOTP(email, otp);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c OTP:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

// üìå Qu√™n m·∫≠t kh·∫©u
const forgotPassword = async (req, res) => {
  const { email } = req.body;
  if (!email) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email" });
  }
  try {
    const result = await userService.forgotPassword(email);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

// üìå X√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u
const forgotPasswordOTP = async (req, res) => {
  const { email, otp } = req.body;
  if (!email || !otp) {
    return res
      .status(400)
      .json({ message: "Vui l√≤ng cung c·∫•p email v√† m√£ OTP" });
  }
  try {
    const result = await userService.forgotPasswordOTP(email, otp);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói x√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

// üìå ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
const resetPassword = async (req, res) => {
  const { email, newPassword } = req.body;
  if (!email || !newPassword) {
    return res
      .status(400)
      .json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u m·ªõi" });
  }
  try {
    const result = await userService.resetPassword(email, newPassword);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

const updateProfile = async (req, res) => {
  try {
    const result = await userService.updateUserProfile(
      req.user,
      req.body,
      req.file
    );
    return res.status(result.status).json(result.data);
  } catch (err) {
    return res
      .status(500)
      .json({
        success: false,
        message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
        error: err.message,
      });
  }
};

const searchUsers = async (req, res) => {
  const { query } = req.query;
  if (!query) {
    return res
      .status(400)
      .json({ message: "Vui l√≤ng cung c·∫•p t·ª´ kh√≥a t√¨m ki·∫øm" });
  }

  try {
    const userId = req.user.id;
    const result = await userService.searchUsers(query, userId);
    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói t√¨m ki·∫øm ng∆∞·ªùi d√πng:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
const getMyInfo = async (req, res) => {
  try {
    const userId = req.user.id;
    const user = await User.findById(userId).select("-password -otp -__v");
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }
    return res.status(200).json({ success: true, user });
  } catch (err) {
    console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
    return res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

const refreshToken = async (req, res) => {
  const refreshToken = req.cookies.refreshToken;
  if (!refreshToken) {
    return res.status(401).json({ message: "Kh√¥ng c√≥ refresh token" });
  }

  try {
    const result = await userService.refreshToken(refreshToken);
    if (result.status !== 200) {
      return res.status(result.status).json(result.data);
    }

    res.cookie("refreshToken", result.refreshToken, {
      httpOnly: true,
      secure: false,
      sameSite: "Strict",
      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 ng√†y
    });

    return res.status(result.status).json(result.data);
  } catch (error) {
    console.error("L·ªói l√†m m·ªõi token:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};

const logout = async (req, res) => {
  const refreshToken = req.cookies.refreshToken;
  if (!refreshToken) {
    return res.status(401).json({ message: "Kh√¥ng c√≥ refresh token" });
  }
  try {
    const result = await userService.logout(refreshToken);
    if (result.status !== 200) {
      return res.status(result.status).json(result.data);
    }
    res.clearCookie("refreshToken", {
      httpOnly: true,
      secure: false,
      sameSite: "Strict",
    });
    return res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng xu·∫•t:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
module.exports = {
  login,
  getProfile,
  register,
  verifyOTP,
  forgotPassword,
  forgotPasswordOTP,
  resetPassword,
  updateProfile,
  searchUsers,
  getUserProfileByUsername,
  getMyInfo,
  refreshToken,
  logout,
};
